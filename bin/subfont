#!/usr/bin/env node

var optimist = require('optimist');

var commandLineOptions = optimist
  .usage('Create optimal font subsets from your actual font usage.\n$0 [options] <htmlFile(s) | url(s)>')
  .options('h', {
    alias: 'help',
    describe: 'Show this help',
    type: 'boolean',
    default: false
  })
  .options('root', {
    describe: 'Path to your web root (will be deduced from your input files if not specified)',
    type: 'string',
    demand: false
  })
  .options('o', {
    alias: 'output',
    describe: 'Directory where results should be written to',
    type: 'string',
    demand: false
  })
  .options('i', {
    alias: 'in-place',
    describe: 'Modify HTML-files in-place. Only use on build artifacts',
    type: 'boolean',
    default: false
  })
  .options('inline-subsets', {
    describe: 'Inline fonts as data-URIs inside the @font-face declaration',
    type: 'boolean',
    default: false
  })
  .options('inline-css', {
    describe: 'Inline CSS that declares the @font-face for the subset fonts',
    type: 'boolean',
    default: false
  })
  .options('font-display', {
    describe: 'Injects a font-display value into the @font-face CSS. Valid values: auto, block, swap, fallback, optional',
    type: 'string',
    default: 'auto'
  })
  .options('recursive', {
    alias: 'r',
    describe: 'Crawl all HTML-pages linked with relative and root relative links. This stays inside your domain',
    type: 'boolean',
    default: true
  })
  .options('d', {
    alias: 'debug',
    describe: 'Verbose insigts into font glyph detection',
    type: 'boolean',
    default: false
  })
  .wrap(72)
  .argv;

if (commandLineOptions.h) {
    optimist.showHelp();
    process.exit(1);
}

var validFontDisplayValues = [
  'auto',
  'block',
  'swap',
  'fallback',
  'optional'
];

if (validFontDisplayValues.indexOf(commandLineOptions['font-display']) === -1) {
  console.error('Error: Option --font-display must be one of: auto, block, swap, fallback, optional');
  process.exit(1);
}

var urlTools = require('urltools');
var rootUrl = commandLineOptions.root && urlTools.urlOrFsPathToUrl(commandLineOptions.root, true);
var outRoot = commandLineOptions.output && urlTools.urlOrFsPathToUrl(commandLineOptions.output, true);
var inPlace = commandLineOptions['in-place'];
var inlineSubsets = commandLineOptions['inline-subsets'];
var inlineCss = commandLineOptions['inline-css'];
var fontDisplay = commandLineOptions['font-display'];
var debug = commandLineOptions.debug;
var inputUrls;

if (commandLineOptions._.length > 0) {
  inputUrls = commandLineOptions._.map(function (urlOrFsPath) {
    return urlTools.urlOrFsPathToUrl(String(urlOrFsPath), false);
  });
  if (!rootUrl) {
    rootUrl = urlTools.findCommonUrlPrefix(inputUrls);

    if (rootUrl.indexOf('file:') === -1) {
      rootUrl = urlTools.ensureTrailingSlash(rootUrl);
    }

    if (rootUrl) {
      console.error('Guessing --root from input files: ' + rootUrl);
    }
  }
} else if (rootUrl && /^file:/.test(rootUrl)) {
  inputUrls = [rootUrl + '**/*.html'];
  console.error('No input files specified, defaulting to ' + inputUrls[0]);
} else {
  console.error('No input files and no --root specified (or it isn\'t file:), cannot proceed.\n');
  optimist.showHelp();
  process.exit(1);
}

if (inputUrls[0].indexOf('file:') === -1 && !outRoot) {
  console.error('--output has to be specified when using non-file input urls');
  process.exit(1);
}

if (!inPlace && !outRoot) {
  console.error('Either --output or --in-place has to be specified');
  process.exit(1);
}

var AssetGraph = require('assetgraph');
var query = AssetGraph.query;

var assetGraphConfig = {
  root: rootUrl
};

if (rootUrl.indexOf('file:') === -1) {
  assetGraphConfig.canonicalRoot = rootUrl.replace(/\/?$/, '/'); // Ensure trailing slash
}

var followRelationsQuery = {
  crossorigin: false
};

if (!commandLineOptions.recursive) {
  followRelationsQuery.type = AssetGraph.query.not(/Anchor$/);
}

var assetGraph = new AssetGraph(assetGraphConfig);
assetGraph
  .logEvents()
  .loadAssets(inputUrls)
  .populate({
    followRelations: followRelationsQuery
  })
  .subsetGoogleFonts({
    debug: debug,
    inlineSubsets: inlineSubsets,
    inlineCss: inlineCss,
    fontDisplay: fontDisplay,
  })
  .if(rootUrl.indexOf('file:') === -1)
    .queue(function rootRelativeRelations(assetGraph) {
      assetGraph.findRelations().forEach(function (relation) {
        if (relation.hrefType === 'protocolRelative' || relation.hrefType === 'absolute') {
          relation.hrefType = 'rootRelative';
        }
      })
    })
    .moveAssets({ type: 'Html', isLoaded: true, isInline: false, fileName: query.or('', undefined) }, function (asset, assetGraph) {
      var nextSuffixToTry = 0;
      var url;
      do {
        url = asset.url.replace(rootUrl, outRoot).replace(/\/?$/, '/') + 'index' + (nextSuffixToTry ? '-' + nextSuffixToTry : '') + asset.defaultExtension;
        nextSuffixToTry += 1;
      } while (assetGraph.findAssets({ url: url }).length > 0);

      return url;
    })
  .endif()

  .writeAssetsToDisc({ isLoaded: true, url: AssetGraph.query.createPrefixMatcher(assetGraph.root) }, outRoot, assetGraph.root)
  .run(function (assetGraph) {
    console.log('Output written to', outRoot);
  });
